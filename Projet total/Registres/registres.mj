const REG_SIZE = 4
const LOG_REG_NUM = 3
const REG_NUM = 8

(* registre assembleur *)
ass_reg<nbits>(i:[nbits], write_en) = (o:[nbits]) where
    if nbits = 0 then
        o = []
    else    
        t = mux(write_en, i[0], o_0);
        o_0 = reg(t);
        o_n1 = ass_reg<nbits-1>(i[1..], write_en);
        o = o_0 . o_n1;
    end if
end where

nmux<nbits>(cond, i_1:[nbits], i_0:[nbits]) = (o:[nbits]) where
    if nbits = 0 then
        o = []
    else
        o_0 = mux(cond, i_1[0], i_0[0]);
        o_n1 = nmux<nbits-1>(cond, i_1[1..], i_0[1..]);
        o = o_0 . o_n1;
    end if
end where

(* 2**log_nregs = nombres de registres *)
reg_file<log_nregs>
(
    read_addr1:[log_nregs], 
    read_addr2:[log_nregs],
    write_addr:[log_nregs],
    write_en,
    write_data:[REG_SIZE]
) = (
    o1:[REG_SIZE],
    o2:[REG_SIZE]
) where
    if log_nregs = 0 then
        (* all the register addresses are the same *)
        o = ass_reg<REG_SIZE>(write_data, write_en);
        o1 = o;
        o2 = o;
    else
        (* premiere moitie registres *)
        (o1_low, o2_low) = reg_file<log_nregs-1>(
            read_addr1[1..], 
            read_addr2[1..], 
            write_addr[1..], 
            (not write_addr[0]) & write_en, 
            write_data
        );
        (* seconde moitie des registres *)
        (o1_high, o2_high) = reg_file<log_nregs-1>(
            read_addr1[1..], 
            read_addr2[1..], 
            write_addr[1..], 
            write_addr[0] & write_en, 
            write_data
        );
        o1 = nmux<REG_SIZE>(read_addr1[0], o1_high, o1_low);
        o2 = nmux<REG_SIZE>(read_addr2[0], o2_high, o2_low);
    end if
end where

(* petit wrapper autour de reg_file pour tester *)
main(
    read_addr1:[LOG_REG_NUM],
    read_addr2:[LOG_REG_NUM],
    write_addr:[LOG_REG_NUM],
    write_en,
    write_data:[REG_SIZE]
) = (
    o1:[REG_SIZE],
    o2:[REG_SIZE]
) where
    (o1, o2) = reg_file<LOG_REG_NUM>(
        read_addr1,
        read_addr2,
        write_addr,
        write_en,
        write_data    
    );
end where